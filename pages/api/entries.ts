import { NextApiRequest, NextApiResponse } from 'next'
import { createClient } from '@supabase/supabase-js'
import { callSummaryAgent, updateEntrySummary } from '../../lib/summaryAgent'

// ÏÑúÎ≤Ñ ÏÇ¨Ïù¥ÎìúÏóêÏÑú service_role ÏÇ¨Ïö© (ÌÉÄÏûÑÏïÑÏõÉ Ï†úÌïú ÏóÜÏùå)
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!, // service_role ÌÇ§ ÏÇ¨Ïö©
  {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    }
  }
)

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const { entryData, esmData, logsData, aiPromptsData, additionalMetrics } = req.body

    // Îß§Ïö∞ ÏïàÏ†ÑÌïú JSON Î≥ÄÌôò Ìï®Ïàò (ÏàúÌôò Ï∞∏Ï°∞ ÏôÑÏ†Ñ Ï∞®Îã®)
    const safeStringify = (obj: any) => {
      const seen = new WeakSet();
      
      try {
        return JSON.stringify(obj, (key, value) => {
          // ÏàúÌôò Ï∞∏Ï°∞ Ï∞®Îã®
          if (typeof value === 'object' && value !== null) {
            if (seen.has(value)) {
              return '[Circular Reference]';
            }
            seen.add(value);
          }
          
          // ÏúÑÌóòÌïú ÌÉÄÏûÖÎì§ Ï†úÏô∏
          if (typeof value === 'function' || 
              typeof value === 'undefined' || 
              typeof value === 'symbol') {
            return undefined;
          }
          
          // DOM/React ÏöîÏÜå ÏôÑÏ†Ñ Ï∞®Îã®
          if (value && typeof value === 'object') {
            // HTML ÏöîÏÜå Ï≤¥ÌÅ¨
            if (value.nodeType || 
                value.nodeName || 
                (value.constructor && (
                  value.constructor.name?.includes('HTML') ||
                  value.constructor.name?.includes('Element') ||
                  value.constructor.name?.includes('Node') ||
                  value.constructor.name?.includes('Fiber')
                ))) {
              return undefined;
            }
            
            // React Í¥ÄÎ†® ÏÜçÏÑ± Ï≤¥ÌÅ¨
            if (value._reactInternalFiber || 
                value._reactFiber ||
                value.$$typeof ||
                value._owner ||
                value.stateNode) {
              return undefined;
            }
            
            // ÎÑàÎ¨¥ ÌÅ∞ Í∞ùÏ≤¥ Ï†úÌïú
            if (Object.keys(value).length > 50) {
              return '[Object Too Large]';
            }
          }
          
          // Î¨∏ÏûêÏó¥ Í∏∏Ïù¥ Ï†úÌïú
          if (typeof value === 'string' && value.length > 2000) {
            return value.substring(0, 2000) + '...[truncated]';
          }
          
          return value;
        });
      } catch (error) {
        console.error('‚ùå JSON Î≥ÄÌôò ÏôÑÏ†Ñ Ïã§Ìå®:', error);
        return '[]'; // Í∏∞Î≥∏Í∞íÏúºÎ°ú Îπà Î∞∞Ïó¥
      }
    };

    // Ï∂îÍ∞Ä Î©îÌä∏Î¶≠ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÎäî Í≤ΩÏö∞ entryDataÏóê Ìè¨Ìï®
    let finalEntryData = { ...entryData }
    if (additionalMetrics) {
      // ÏïàÏ†ÑÌïú Î°úÍ∑∏ Ï∂úÎ†• (AI ÌÖçÏä§Ìä∏ Î∞∞Ïó¥ ÏöîÏïΩ)
      const logSafeMetrics = {
        leftPanelRequests: additionalMetrics.leftPanelRequests || 0,
        rightPanelRequests: additionalMetrics.rightPanelRequests || 0,
        leftPanelInsertions: additionalMetrics.leftPanelInsertions || 0,
        rightPanelInsertions: additionalMetrics.rightPanelInsertions || 0,
        syllableCount: additionalMetrics.syllableCount || 0,
        aiTextsCount: Array.isArray(additionalMetrics.aiTextsAdded) ? additionalMetrics.aiTextsAdded.length : 0
      };
      console.log('üìä [API] Î∞õÏùÄ Ï∂îÍ∞Ä Î©îÌä∏Î¶≠:', logSafeMetrics)
      
      // Í∏∞Ï°¥ ÌÖåÏù¥Î∏îÏóê ÏÉàÎ°úÏö¥ ÌïÑÎìúÎì§ÏùÑ ÏïàÏ†ÑÌïòÍ≤å Ï∂îÍ∞Ä
      const metricsToAdd = {
        left_panel_requests: additionalMetrics.leftPanelRequests || 0,
        right_panel_requests: additionalMetrics.rightPanelRequests || 0,
        left_panel_insertions: additionalMetrics.leftPanelInsertions || 0,
        right_panel_insertions: additionalMetrics.rightPanelInsertions || 0,
        ai_texts_added: safeStringify(additionalMetrics.aiTextsAdded || []),
        syllable_count: additionalMetrics.syllableCount || 0
      }
      
      console.log('üìä [API] Ï∂îÍ∞ÄÌï† Î©îÌä∏Î¶≠ ÌïÑÎìúÎì§:', {
        ...logSafeMetrics,
        ai_texts_added_length: metricsToAdd.ai_texts_added.length
      })
      
      finalEntryData = {
        ...finalEntryData,
        ...metricsToAdd
      }
      
      console.log('üìä [API] ÏµúÏ¢Ö Ï†ÄÏû• Îç∞Ïù¥ÌÑ∞ ÏöîÏïΩ:', {
        id: finalEntryData.id,
        participant_code: finalEntryData.participant_code,
        title: finalEntryData.title?.substring(0, 20) + '...',
        content_length: finalEntryData.content_html?.length || 0,
        ...logSafeMetrics
      })
    } else {
      console.log('‚ö†Ô∏è [API] additionalMetricsÍ∞Ä ÏóÜÏùå')
    }

    // 1. Entry Ï†ÄÏû•
    console.log('üíæ [API] Entry Ï†ÄÏû• ÏãúÎèÑ Ï§ë...')
    const { data: entryResult, error: entryError } = await supabase
      .from('entries')
      .upsert(finalEntryData)
      .select()

    if (entryError) {
      console.error('‚ùå Entry Ï†ÄÏû• Ïã§Ìå®:', entryError)
      return res.status(500).json({ 
        error: 'Entry Ï†ÄÏû• Ïã§Ìå®', 
        details: entryError 
      })
    }
    
    // Ï†ÄÏû• Í≤∞Í≥ºÎ•º ÏïàÏ†ÑÌïòÍ≤å Î°úÍ∑∏ Ï∂úÎ†•
    if (entryResult && entryResult.length > 0) {
      const savedEntry = entryResult[0];
      console.log('‚úÖ [API] Entry Ï†ÄÏû• ÏÑ±Í≥µ:', {
        id: savedEntry.id,
        participant_code: savedEntry.participant_code,
        title: savedEntry.title?.substring(0, 30) + '...',
        left_panel_requests: savedEntry.left_panel_requests,
        right_panel_requests: savedEntry.right_panel_requests,
        left_panel_insertions: savedEntry.left_panel_insertions,
        right_panel_insertions: savedEntry.right_panel_insertions,
        syllable_count: savedEntry.syllable_count,
        ai_texts_added_count: (() => {
          try {
            return savedEntry.ai_texts_added ? JSON.parse(savedEntry.ai_texts_added).length : 0;
          } catch (e) {
            return 0;
          }
        })()
      });
    } else {
      console.log('‚úÖ [API] Entry Ï†ÄÏû• ÏÑ±Í≥µ (Í≤∞Í≥º ÏóÜÏùå)');
    }

    // 2. ESM ÏùëÎãµ Ï†ÄÏû•
    const { data: esmResult, error: esmError } = await supabase
      .from('esm_responses')
      .insert(esmData)
      .select()

    if (esmError) {
      console.error('‚ùå ESM Ï†ÄÏû• Ïã§Ìå®:', esmError)
      return res.status(500).json({ 
        error: 'ESM Ï†ÄÏû• Ïã§Ìå®', 
        details: esmError 
      })
    }

    // 3. Î°úÍ∑∏ Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• (ÏûàÎäî Í≤ΩÏö∞)
    if (logsData && logsData.length > 0) {
      const { error: logsError } = await supabase
        .from('interaction_logs')
        .insert(logsData)
      
      if (logsError) {
        console.error('‚ùå Î°úÍ∑∏ Ï†ÄÏû• Ïã§Ìå®:', logsError)
        // Î°úÍ∑∏ Ï†ÄÏû• Ïã§Ìå®Îäî Ï†ÑÏ≤¥ ÌîÑÎ°úÏÑ∏Ïä§Î•º Ï§ëÎã®ÌïòÏßÄ ÏïäÏùå
      }
    }

    // 4. AI ÌîÑÎ°¨ÌîÑÌä∏ Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• (ÏûàÎäî Í≤ΩÏö∞)
    if (aiPromptsData && aiPromptsData.length > 0) {
      const { error: aiPromptsError } = await supabase
        .from('ai_prompts')
        .insert(aiPromptsData)
      
      if (aiPromptsError) {
        console.error('‚ùå AI ÌîÑÎ°¨ÌîÑÌä∏ Ï†ÄÏû• Ïã§Ìå®:', aiPromptsError)
        // AI ÌîÑÎ°¨ÌîÑÌä∏ Ï†ÄÏû• Ïã§Ìå®Îäî Ï†ÑÏ≤¥ ÌîÑÎ°úÏÑ∏Ïä§Î•º Ï§ëÎã®ÌïòÏßÄ ÏïäÏùå
      }
    }

    // 5. ÏÑúÎ®∏Î¶¨ ÏóêÏù¥Ï†ÑÌä∏ Ìò∏Ï∂ú Î∞è ÏóÖÎç∞Ïù¥Ìä∏ (Î∞±Í∑∏ÎùºÏö¥Îìú Ï≤òÎ¶¨)
    if (entryResult && entryResult.length > 0) {
      const savedEntry = entryResult[0]
      
      // ÏÑúÎ®∏Î¶¨ ÏóêÏù¥Ï†ÑÌä∏Î•º Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú Ïã§Ìñâ
      const runSummaryAgent = async () => {
        try {
          console.log('‚úÖ ÏÑúÎ®∏Î¶¨ ÏóêÏù¥Ï†ÑÌä∏ Ìò∏Ï∂ú ÏãúÏûë:', savedEntry.id)
          
          // ÏÑúÎ®∏Î¶¨ ÏóêÏù¥Ï†ÑÌä∏ Ìò∏Ï∂ú
          const summaryResult = await callSummaryAgent(
            savedEntry.content_html,
            savedEntry.id,
            savedEntry.participant_code
          )
          
          console.log('‚úÖ ÏÑúÎ®∏Î¶¨ ÏóêÏù¥Ï†ÑÌä∏ Í≤∞Í≥º:', summaryResult)
          
          // service_roleÏùÑ ÏÇ¨Ïö©ÌïòÏó¨ ÏóÖÎç∞Ïù¥Ìä∏
          await updateEntrySummary(savedEntry.id, summaryResult, supabase)
          
        } catch (error) {
          console.error('‚ùå ÏÑúÎ®∏Î¶¨ ÏóêÏù¥Ï†ÑÌä∏ Ï†ÑÏ≤¥ ÌîÑÎ°úÏÑ∏Ïä§ Ïã§Ìå®:', error)
        }
      }
      
      // setTimeoutÏùÑ ÏÇ¨Ïö©ÌïòÏó¨ Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú Ïã§Ìñâ
      setTimeout(() => {
        runSummaryAgent()
      }, 0)
    }

    res.status(200).json({ 
      success: true, 
      entry: entryResult,
      esm: esmResult,
      logsCount: logsData?.length || 0,
      aiPromptsCount: aiPromptsData?.length || 0
    })

  } catch (error) {
    console.error('‚ùå ÏÑúÎ≤Ñ Ïò§Î•ò:', error)
    res.status(500).json({ 
      error: 'ÏÑúÎ≤Ñ Ïò§Î•ò', 
      details: error instanceof Error ? error.message : 'Unknown error' 
    })
  }
} 